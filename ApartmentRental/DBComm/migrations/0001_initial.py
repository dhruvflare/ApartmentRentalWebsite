# Generated by Django 5.2.5 on 2025-08-23 10:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('street_address', models.CharField(max_length=255)),
                ('apartment_number', models.CharField(blank=True, max_length=20, null=True)),
                ('locality', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('pincode', models.CharField(max_length=10)),
                ('country', models.CharField(default='India', max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('landmark', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'db_table': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amenity_name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(blank=True, max_length=50, null=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='amenity_icons/')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Amenity',
                'verbose_name_plural': 'Amenities',
                'db_table': 'amenities',
            },
        ),
        migrations.CreateModel(
            name='FurnishingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('furnishing_type', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Furnishing Type',
                'verbose_name_plural': 'Furnishing Types',
                'db_table': 'furnishing_types',
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('locality_name', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('pincode', models.CharField(blank=True, max_length=10, null=True)),
                ('area_type', models.CharField(blank=True, choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('mixed', 'Mixed')], max_length=20, null=True)),
                ('connectivity_rating', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('safety_rating', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('lifestyle_rating', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'verbose_name': 'Locality',
                'verbose_name_plural': 'Localities',
                'db_table': 'localities',
            },
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type_name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Property Type',
                'verbose_name_plural': 'Property Types',
                'db_table': 'property_types',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('bedrooms', models.PositiveIntegerField()),
                ('bathrooms', models.PositiveIntegerField()),
                ('total_area_sqft', models.PositiveIntegerField(blank=True, null=True)),
                ('carpet_area_sqft', models.PositiveIntegerField(blank=True, null=True)),
                ('floor_number', models.IntegerField(blank=True, null=True)),
                ('total_floors', models.PositiveIntegerField(blank=True, null=True)),
                ('age_of_property', models.PositiveIntegerField(blank=True, null=True)),
                ('parking_available', models.BooleanField(default=False)),
                ('parking_spaces', models.PositiveIntegerField(default=0)),
                ('balcony_count', models.PositiveIntegerField(default=0)),
                ('construction_status', models.CharField(blank=True, choices=[('ready_to_move', 'Ready to Move'), ('under_construction', 'Under Construction')], max_length=20, null=True)),
                ('facing_direction', models.CharField(blank=True, choices=[('north', 'North'), ('south', 'South'), ('east', 'East'), ('west', 'West'), ('north_east', 'North East'), ('north_west', 'North West'), ('south_east', 'South East'), ('south_west', 'South West')], max_length=20, null=True)),
                ('preferred_tenant', models.CharField(blank=True, choices=[('family', 'Family'), ('bachelor_male', 'Bachelor Male'), ('bachelor_female', 'Bachelor Female'), ('company', 'Company'), ('any', 'Any')], max_length=20, null=True)),
                ('available_from', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='DBComm.address')),
                ('furnishing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='properties', to='DBComm.furnishingtype')),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Properties',
                'db_table': 'properties',
            },
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('monthly_rent', models.DecimalField(decimal_places=2, max_digits=10)),
                ('security_deposit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('maintenance_charges', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('brokerage_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('listing_type', models.CharField(blank=True, choices=[('rent', 'Rent'), ('sale', 'Sale')], max_length=10, null=True)),
                ('listing_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('rented', 'Rented'), ('sold', 'Sold')], default='active', max_length=20)),
                ('negotiable', models.BooleanField(default=True)),
                ('immediately_available', models.BooleanField(default=True)),
                ('listing_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('contact_count', models.PositiveIntegerField(default=0)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings', to='DBComm.property')),
            ],
            options={
                'verbose_name': 'Listing',
                'verbose_name_plural': 'Listings',
                'db_table': 'listings',
            },
        ),
        migrations.CreateModel(
            name='PropertyAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_amenities', to='DBComm.amenity')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_amenities', to='DBComm.property')),
            ],
            options={
                'verbose_name': 'Property Amenity',
                'verbose_name_plural': 'Property Amenities',
                'db_table': 'property_amenities',
            },
        ),
        migrations.AddField(
            model_name='property',
            name='amenities',
            field=models.ManyToManyField(related_name='properties', through='DBComm.PropertyAmenity', to='DBComm.amenity'),
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(upload_to='property_images/')),
                ('image_type', models.CharField(choices=[('main', 'Main'), ('bedroom', 'Bedroom'), ('bathroom', 'Bathroom'), ('kitchen', 'Kitchen'), ('living_room', 'Living Room'), ('balcony', 'Balcony'), ('exterior', 'Exterior'), ('floor_plan', 'Floor Plan')], max_length=50)),
                ('image_order', models.PositiveIntegerField(default=0)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('dimensions', models.CharField(blank=True, max_length=20, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='DBComm.property')),
            ],
            options={
                'verbose_name': 'Property Image',
                'verbose_name_plural': 'Property Images',
                'db_table': 'property_images',
                'ordering': ['image_order', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='property',
            name='property_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='properties', to='DBComm.propertytype'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('user_type', models.CharField(choices=[('owner', 'Owner'), ('tenant', 'Tenant'), ('both', 'Both')], max_length=10)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('min_rent', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_rent', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('bedrooms', models.PositiveIntegerField(blank=True, null=True)),
                ('search_query', models.JSONField(blank=True, default=dict)),
                ('furnishing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='searches', to='DBComm.furnishingtype')),
                ('property_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='searches', to='DBComm.propertytype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='searches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Search',
                'verbose_name_plural': 'User Searches',
                'db_table': 'user_searches',
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_locations', models.JSONField(blank=True, default=list)),
                ('budget_min', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('budget_max', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('preferred_property_types', models.JSONField(blank=True, default=list)),
                ('preferred_amenities', models.JSONField(blank=True, default=list)),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
                'db_table': 'user_preferences',
            },
        ),
        migrations.CreateModel(
            name='SavedProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by_users', to='DBComm.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_properties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Saved Property',
                'verbose_name_plural': 'Saved Properties',
                'db_table': 'saved_properties',
            },
        ),
        migrations.CreateModel(
            name='ReviewRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='DBComm.property')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review & Rating',
                'verbose_name_plural': 'Reviews & Ratings',
                'db_table': 'reviews_ratings',
            },
        ),
        migrations.CreateModel(
            name='PropertyVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('visit_date', models.DateField()),
                ('visit_time', models.TimeField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='DBComm.property')),
                ('visitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_visits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Visit',
                'verbose_name_plural': 'Property Visits',
                'db_table': 'property_visits',
            },
        ),
        migrations.CreateModel(
            name='PropertyInquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inquiry_type', models.CharField(blank=True, choices=[('call', 'Call'), ('message', 'Message'), ('visit_request', 'Visit Request'), ('general', 'General')], max_length=20, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('preferred_contact_time', models.CharField(blank=True, max_length=50, null=True)),
                ('inquiry_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('responded', 'Responded'), ('closed', 'Closed')], default='pending', max_length=20)),
                ('owner_response', models.TextField(blank=True, null=True)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inquiries', to='DBComm.listing')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inquiries', to='DBComm.property')),
                ('inquirer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inquiries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Inquiry',
                'verbose_name_plural': 'Property Inquiries',
                'db_table': 'property_inquiries',
            },
        ),
        migrations.AddField(
            model_name='property',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_properties', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='NearbyPlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('place_type', models.CharField(blank=True, choices=[('metro_station', 'Metro Station'), ('bus_stop', 'Bus Stop'), ('hospital', 'Hospital'), ('school', 'School'), ('mall', 'Mall'), ('market', 'Market'), ('restaurant', 'Restaurant'), ('atm', 'ATM'), ('gym', 'Gym')], max_length=30, null=True)),
                ('place_name', models.CharField(max_length=200)),
                ('distance_km', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('walk_time_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nearby_places', to='DBComm.property')),
            ],
            options={
                'verbose_name': 'Nearby Place',
                'verbose_name_plural': 'Nearby Places',
                'db_table': 'nearby_places',
                'indexes': [models.Index(fields=['property'], name='nearby_plac_propert_546620_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['property'], name='listings_propert_302bce_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['listing_status'], name='listings_listing_8a8bbd_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['monthly_rent', 'listing_status'], name='listings_monthly_70aae3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='propertyamenity',
            unique_together={('property', 'amenity')},
        ),
        migrations.AddIndex(
            model_name='propertyimage',
            index=models.Index(fields=['property'], name='property_im_propert_918ab6_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyimage',
            index=models.Index(fields=['property', 'is_primary'], name='property_im_propert_0ad054_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearch',
            index=models.Index(fields=['user', 'created_at'], name='user_search_user_id_ab6a66_idx'),
        ),
        migrations.AddConstraint(
            model_name='usersearch',
            constraint=models.CheckConstraint(condition=models.Q(('min_rent__isnull', True), ('max_rent__isnull', True), ('min_rent__lte', models.F('max_rent')), _connector='OR'), name='min_rent_lte_max_rent'),
        ),
        migrations.AddIndex(
            model_name='savedproperty',
            index=models.Index(fields=['user', 'property'], name='saved_prope_user_id_6f846f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='savedproperty',
            unique_together={('user', 'property')},
        ),
        migrations.AddIndex(
            model_name='reviewrating',
            index=models.Index(fields=['property'], name='reviews_rat_propert_13834b_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewrating',
            index=models.Index(fields=['reviewer'], name='reviews_rat_reviewe_14c712_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyvisit',
            index=models.Index(fields=['property'], name='property_vi_propert_e02903_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyvisit',
            index=models.Index(fields=['visitor'], name='property_vi_visitor_00657f_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyvisit',
            index=models.Index(fields=['visit_date', 'status'], name='property_vi_visit_d_273918_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyinquiry',
            index=models.Index(fields=['property', 'inquirer'], name='property_in_propert_511162_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyinquiry',
            index=models.Index(fields=['inquirer', 'inquiry_date'], name='property_in_inquire_022a18_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['owner'], name='properties_owner_i_921947_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['property_type', 'is_active'], name='properties_propert_28491b_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['bedrooms', 'is_active'], name='properties_bedroom_859571_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['address'], name='properties_address_c0c24e_idx'),
        ),
    ]
